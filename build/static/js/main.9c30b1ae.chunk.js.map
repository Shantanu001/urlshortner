{"version":3,"sources":["router/appRouter.js","App.js","serviceWorker.js","index.js"],"names":["Search","Layout","Header","Footer","Content","Sider","Input","appRouter","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","UpdateURLText","val","console","log","axios","get","params","url","headers","Access-Control-Allow-Origin","Access-Control-Allow-Methods","then","res","temp","state","data","setState","openUrl","window","open","cards","shortenUrl","_this2","react_default","a","createElement","class","placeholder","enterButton","size","onSearch","value","Component","App","className","router_appRouter","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iOAOQA,GADoCC,IAApCC,OAAoCD,IAA5BE,OAA4BF,IAApBG,QAAoBH,IAAXI,MACdC,IAAXN,QAkEOO,cA9Db,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,cAAgB,SAAAC,GACdC,QAAQC,IAAI,OAAOF,GACnBG,IACCC,IACC,YACA,CACEC,OAAQ,CACNC,IAAKN,IAGT,CAAEO,QAAS,CAAEC,8BAA8B,IAAIC,+BAAgC,2CAEhFC,KAAK,SAAAC,GACJ,IAAIC,EAAOpB,EAAKqB,MAChBD,EAAI,WAAiBD,EAAIG,KACzBtB,EAAKuB,SAASH,GACdX,QAAQC,IAAI,OAAOS,MAzBJnB,EA8BnBwB,QAAU,SAAAhB,GACRiB,OAAOC,KAAKlB,IA5BZR,EAAKqB,MAAQ,CACXM,MAAO,GACPC,WAAY,IALG5B,wEAoCV,IAAA6B,EAAA1B,KACP,OAEE2B,EAAAC,EAAAC,cAAA,OAAKC,MAAM,aACVH,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAACzC,EAAD,CACD2C,YAAY,iBACZC,YAAY,cACZC,KAAK,QACLC,SAAU,SAAAC,GAAK,OAAIT,EAAKtB,cAAc+B,MAEtCR,EAAAC,EAAAC,cAACzC,EAAD,CACA2C,YAAY,cACZC,YAAY,WACZG,MAAQnC,KAAKkB,MAAMO,WACnBS,SAAU,SAAAC,GAAK,OAAIT,EAAKL,QAAQc,IAChCF,KAAK,kBArDaG,aCITC,mLARX,OACEV,EAAAC,EAAAC,cAAA,OAAKS,UAAU,OACbX,EAAAC,EAAAC,cAACU,EAAD,cAJUH,aCQEI,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,kECXNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.9c30b1ae.chunk.js","sourcesContent":["import React, { Component} from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport ReactDOM from \"react-dom\";\n\nimport axios from \"axios\";\nimport { Layout,Input } from \"antd\";\nconst { Header, Footer, Content, Sider, } = Layout;\nconst { Search } = Input;\n\n\nclass appRouter extends Component { \n  constructor(props) {\n    super(props);\n    //console.log(\"context\",this.context);\n    this.state = {\n      cards: [],\n      shortenUrl: \"\"\n    };\n  }\n\n  UpdateURLText = val =>{\n    console.log(\"data\",val);\n    axios\n    .get(\n      \"/crontest\",\n      {\n        params: {\n          url: val\n        }\n      },\n      { headers: { \"Access-Control-Allow-Origin\":\"*\",\"Access-Control-Allow-Methods\": \"GET, PUT, POST, DELETE, HEAD, OPTIONS\" } }\n    )\n    .then(res => {\n      var temp = this.state;\n      temp[\"shortenUrl\"] = res.data;\n      this.setState(temp);\n      console.log(\"here\",res);\n    });\n\n  }\n\n  openUrl = val =>{\n    window.open(val);\n  }\n\n\n\n  render() {\n    return (\n      \n      <div class='container' >\n       <h2>URL SHORTENING SERVICE</h2>\n       <Search\n      placeholder=\"Paste URl here\"\n      enterButton=\"SHORTEN URL\"\n      size=\"large\"\n      onSearch={value => this.UpdateURLText(value)}\n    />\n      <Search\n      placeholder=\"SHORTEN URL\"\n      enterButton=\"GOTO URL\"\n      value ={this.state.shortenUrl}\n      onSearch={value => this.openUrl(value)}\n      size=\"large\"\n    />\n\n      </div>\n                \n      \n    );\n  }\n}\n\nexport default appRouter;\n","import React, { Component } from 'react';\nimport './App.css';\nimport AppRouter from '../src/router/appRouter';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <AppRouter></AppRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"antd/dist/antd.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}